basePath: /
definitions:
  controllers.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
  utils.APIErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
  utils.APISuccessResponse:
    properties:
      data: {}
      status:
        type: integer
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Bu API, JWT tabanlı kimlik doğrulama sistemi örneğidir.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go API Auth Example
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Kullanıcı girişi yapar ve JWT token döner
      parameters:
      - description: Giriş bilgileri
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APISuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      summary: Kullanıcı girişi
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Yeni bir JWT token oluşturur
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APISuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Token yenileme
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Yeni bir kullanıcı kaydı oluşturur
      parameters:
      - description: Kullanıcı bilgileri
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.APISuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      summary: Kullanıcı kaydı
      tags:
      - auth
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
