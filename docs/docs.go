// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import (
	"github.com/swaggo/swag"
)

// @title           Go API
// @version         1.0
// @description     Go API örneği
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8000
// @BasePath  /api

// @securityDefinitions.apikey  BearerAuth
// @in                         header
// @name                       Authorization
// @description               Bearer token authentication
// @scheme                    bearer

// @Security  BearerAuth

func init() {
	swag.Register(swag.Name, &s{})
}

type s struct{}

func (s *s) ReadDoc() string {
	return `{
		"swagger": "2.0",
		"info": {
			"description": "Go API örneği",
			"title": "Go API",
			"version": "1.0"
		},
		"host": "localhost:8000",
		"basePath": "/api",
		"schemes": ["http"],
		"securityDefinitions": {
			"BearerAuth": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header",
				"description": "Bearer token authentication"
			}
		},
		"paths": {
			"/auth/register": {
				"post": {
					"tags": ["auth"],
					"summary": "Kullanıcı kaydı",
					"description": "Yeni bir kullanıcı kaydı oluşturur",
					"consumes": ["application/json"],
					"produces": ["application/json"],
					"parameters": [{
						"in": "body",
						"name": "user",
						"description": "Kullanıcı bilgileri",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RegisterRequest"
						}
					}],
					"responses": {
						"201": {
							"description": "Kullanıcı başarıyla oluşturuldu",
							"schema": {
								"$ref": "#/definitions/RegisterResponse"
							}
						},
						"400": {
							"description": "Geçersiz istek"
						},
						"500": {
							"description": "Sunucu hatası"
						}
					}
				}
			},
			"/auth/login": {
				"post": {
					"tags": ["auth"],
					"summary": "Kullanıcı girişi",
					"description": "Kullanıcı girişi yapar ve JWT token döner",
					"consumes": ["application/json"],
					"produces": ["application/json"],
					"parameters": [{
						"in": "body",
						"name": "credentials",
						"description": "Giriş bilgileri",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LoginRequest"
						}
					}],
					"responses": {
						"200": {
							"description": "Giriş başarılı",
							"schema": {
								"$ref": "#/definitions/LoginResponse"
							}
						},
						"400": {
							"description": "Geçersiz istek"
						},
						"401": {
							"description": "Kullanıcı adı veya şifre hatalı"
						},
						"500": {
							"description": "Sunucu hatası"
						}
					}
				}
			},
			"/auth/refresh": {
				"post": {
					"tags": ["auth"],
					"summary": "Token yenileme",
					"description": "Refresh token ile yeni bir access token alır",
					"consumes": ["application/json"],
					"produces": ["application/json"],
					"parameters": [{
						"in": "body",
						"name": "refresh_token",
						"description": "Refresh token",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RefreshTokenRequest"
						}
					}],
					"responses": {
						"200": {
							"description": "Token başarıyla yenilendi",
							"schema": {
								"$ref": "#/definitions/TokenResponse"
							}
						},
						"400": {
							"description": "Geçersiz istek"
						},
						"401": {
							"description": "Geçersiz refresh token"
						},
						"500": {
							"description": "Sunucu hatası"
						}
					}
				}
			},
			"/books": {
				"get": {
					"security": [
						{
							"BearerAuth": []
						}
					],
					"tags": ["books"],
					"summary": "Kitapları listele",
					"description": "Kullanıcının kitaplarını listeler",
					"produces": ["application/json"],
					"responses": {
						"200": {
							"description": "Başarılı",
							"schema": {
								"type": "object",
								"properties": {
									"status": {
										"type": "string",
										"example": "success"
									},
									"message": {
										"type": "string",
										"example": "Kitaplar başarıyla getirildi"
									},
									"data": {
										"type": "array",
										"items": {
											"$ref": "#/definitions/BookResponse"
										}
									}
								}
							}
						},
						"401": {
							"description": "Yetkilendirme hatası"
						},
						"500": {
							"description": "Sunucu hatası"
						}
					}
				},
				"post": {
					"security": [
						{
							"BearerAuth": []
						}
					],
					"tags": ["books"],
					"summary": "Kitap ekleme",
					"description": "Yeni bir kitap ve özet ekler",
					"consumes": ["application/json"],
					"produces": ["application/json"],
					"parameters": [{
						"in": "body",
						"name": "book",
						"description": "Kitap bilgileri",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Book"
						}
					}],
					"responses": {
						"201": {
							"description": "Kitap başarıyla eklendi",
							"schema": {
								"$ref": "#/definitions/BookResponse"
							}
						},
						"400": {
							"description": "Geçersiz istek"
						},
						"401": {
							"description": "Yetkilendirme hatası"
						},
						"500": {
							"description": "Sunucu hatası"
						}
					}
				}
			},
			"/books/{id}": {
				"get": {
					"security": [
						{
							"BearerAuth": []
						}
					],
					"tags": ["books"],
					"summary": "Kitap detayı",
					"description": "Belirtilen kitabın detaylarını getirir",
					"produces": ["application/json"],
					"parameters": [{
						"in": "path",
						"name": "id",
						"description": "Kitap ID",
						"required": true,
						"type": "integer"
					}],
					"responses": {
						"200": {
							"description": "Başarılı",
							"schema": {
								"$ref": "#/definitions/BookResponse"
							}
						},
						"400": {
							"description": "Geçersiz istek"
						},
						"401": {
							"description": "Yetkilendirme hatası"
						},
						"404": {
							"description": "Kitap bulunamadı"
						}
					}
				},
				"put": {
					"security": [
						{
							"BearerAuth": []
						}
					],
					"tags": ["books"],
					"summary": "Kitap güncelleme",
					"description": "Belirtilen kitabı günceller",
					"consumes": ["application/json"],
					"produces": ["application/json"],
					"parameters": [{
						"in": "path",
						"name": "id",
						"description": "Kitap ID",
						"required": true,
						"type": "integer"
					}, {
						"in": "body",
						"name": "book",
						"description": "Kitap bilgileri",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Book"
						}
					}],
					"responses": {
						"200": {
							"description": "Kitap başarıyla güncellendi",
							"schema": {
								"$ref": "#/definitions/BookResponse"
							}
						},
						"400": {
							"description": "Geçersiz istek"
						},
						"401": {
							"description": "Yetkilendirme hatası"
						},
						"404": {
							"description": "Kitap bulunamadı"
						}
					}
				},
				"delete": {
					"security": [
						{
							"BearerAuth": []
						}
					],
					"tags": ["books"],
					"summary": "Kitap silme",
					"description": "Belirtilen kitabı siler",
					"produces": ["application/json"],
					"parameters": [{
						"in": "path",
						"name": "id",
						"description": "Kitap ID",
						"required": true,
						"type": "integer"
					}],
					"responses": {
						"200": {
							"description": "Kitap başarıyla silindi"
						},
						"400": {
							"description": "Geçersiz istek"
						},
						"401": {
							"description": "Yetkilendirme hatası"
						},
						"404": {
							"description": "Kitap bulunamadı"
						}
					}
				}
			}
		},
		"definitions": {
			"RegisterRequest": {
				"type": "object",
				"required": ["first_name", "last_name", "username", "password", "email"],
				"properties": {
					"first_name": {
						"type": "string",
						"example": "John"
					},
					"last_name": {
						"type": "string",
						"example": "Doe"
					},
					"username": {
						"type": "string",
						"example": "johndoe"
					},
					"password": {
						"type": "string",
						"example": "123456"
					},
					"email": {
						"type": "string",
						"example": "john@example.com"
					}
				}
			},
			"RegisterResponse": {
				"type": "object",
				"properties": {
					"status": {
						"type": "string",
						"example": "success"
					},
					"message": {
						"type": "string",
						"example": "Kullanıcı başarıyla oluşturuldu"
					},
					"data": {
						"type": "object",
						"properties": {
							"user": {
								"$ref": "#/definitions/UserResponse"
							},
							"tokens": {
								"$ref": "#/definitions/TokenResponse"
							}
						}
					}
				}
			},
			"UserResponse": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"example": 4
					},
					"first_name": {
						"type": "string",
						"example": "John"
					},
					"last_name": {
						"type": "string",
						"example": "Doe"
					},
					"username": {
						"type": "string",
						"example": "johndoe"
					},
					"email": {
						"type": "string",
						"example": "john@example.com"
					},
					"created_at": {
						"type": "string",
						"format": "date-time",
						"example": "2025-04-07T20:44:02.0164201+03:00"
					},
					"updated_at": {
						"type": "string",
						"format": "date-time",
						"example": "2025-04-07T20:44:02.0164201+03:00"
					}
				}
			},
			"LoginRequest": {
				"type": "object",
				"required": ["username", "password"],
				"properties": {
					"username": {
						"type": "string",
						"example": "johndoe"
					},
					"password": {
						"type": "string",
						"example": "123456"
					}
				}
			},
			"LoginResponse": {
				"type": "object",
				"properties": {
					"status": {
						"type": "string",
						"example": "success"
					},
					"message": {
						"type": "string",
						"example": "Giriş başarılı"
					},
					"data": {
						"type": "object",
						"properties": {
							"user": {
								"$ref": "#/definitions/UserResponse"
							},
							"tokens": {
								"$ref": "#/definitions/TokenResponse"
							}
						}
					}
				}
			},
			"RefreshTokenRequest": {
				"type": "object",
				"required": ["refresh_token"],
				"properties": {
					"refresh_token": {
						"type": "string",
						"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
					}
				}
			},
			"TokenResponse": {
				"type": "object",
				"properties": {
					"access_token": {
						"type": "string",
						"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
					},
					"refresh_token": {
						"type": "string",
						"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
					},
					"token_type": {
						"type": "string",
						"example": "Bearer"
					},
					"expires_in": {
						"type": "integer",
						"example": 3600
					}
				}
			},
			"Book": {
				"type": "object",
				"required": ["title", "author", "summary", "read_date", "rating"],
				"properties": {
					"title": {
						"type": "string",
						"example": "1984"
					},
					"author": {
						"type": "string",
						"example": "George Orwell"
					},
					"summary": {
						"type": "string",
						"example": "Distopik bir gelecekte geçen, gözetim toplumunu eleştiren bir roman."
					},
					"read_date": {
						"type": "string",
						"format": "date-time",
						"example": "2024-04-07T00:00:00Z"
					},
					"rating": {
						"type": "integer",
						"minimum": 1,
						"maximum": 5,
						"example": 5
					},
					"notes": {
						"type": "string",
						"example": "Etkileyici bir distopya klasiği"
					}
				}
			},
			"BookResponse": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"example": 1
					},
					"title": {
						"type": "string",
						"example": "1984"
					},
					"author": {
						"type": "string",
						"example": "George Orwell"
					},
					"summary": {
						"type": "string",
						"example": "Distopik bir gelecekte geçen, gözetim toplumunu eleştiren bir roman."
					},
					"read_date": {
						"type": "string",
						"format": "date-time",
						"example": "2024-04-07T00:00:00Z"
					},
					"rating": {
						"type": "integer",
						"example": 5
					},
					"notes": {
						"type": "string",
						"example": "Etkileyici bir distopya klasiği"
					},
					"created_at": {
						"type": "string",
						"format": "date-time"
					},
					"updated_at": {
						"type": "string",
						"format": "date-time"
					},
					"user": {
						"type": "object",
						"properties": {
							"id": {
								"type": "integer",
								"example": 1
							},
							"first_name": {
								"type": "string",
								"example": "John"
							},
							"last_name": {
								"type": "string",
								"example": "Doe"
							},
							"username": {
								"type": "string",
								"example": "johndoe"
							}
						}
					}
				}
			}
		}
	}`
}
